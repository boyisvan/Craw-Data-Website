const axios = require('axios');
const config = require('./config');

class ProductCrawler {
  constructor() {
    this.baseUrl = config.baseUrl;
    this.endpoint = config.productsEndpoint;
    this.delay = config.defaultConfig.delay;
  }

  // Cho ph√©p thay ƒë·ªïi baseUrl ƒë·ªông theo site ƒë∆∞·ª£c ch·ªçn
  setBaseUrl(baseUrl) {
    if (baseUrl) this.baseUrl = baseUrl;
  }

  // T·∫°o URL API v·ªõi tham s·ªë
  buildApiUrl(page = 1, perPage = 100, orderBy = 'date', order = 'desc') {
    const params = new URLSearchParams({
      per_page: perPage,
      page: page,
      orderby: orderBy,
      order: order
    });
    
    return `${this.baseUrl}${this.endpoint}&${params.toString()}`;
  }

  // Delay gi·ªØa c√°c request
  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Thu th·∫≠p d·ªØ li·ªáu t·ª´ m·ªôt trang
  async fetchPage(page, perPage, orderBy, order) {
    try {
      const url = this.buildApiUrl(page, perPage, orderBy, order);
      console.log(`üìÑ ƒêang thu th·∫≠p trang ${page}...`);
      
      const response = await axios.get(url, {
        timeout: 30000, // 30 gi√¢y timeout
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
      });

      if (response.status === 200 && response.data) {
        console.log(`‚úÖ Trang ${page}: Thu th·∫≠p th√†nh c√¥ng ${response.data.length} s·∫£n ph·∫©m`);
        return response.data;
      } else {
        console.log(`‚ö†Ô∏è Trang ${page}: Kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c response kh√¥ng h·ª£p l·ªá`);
        return [];
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi thu th·∫≠p trang ${page}:`, error.message);
      return [];
    }
  }

  // Thu th·∫≠p d·ªØ li·ªáu t·ª´ nhi·ªÅu trang
  async crawlProducts(maxPages = 10, perPage = 100, orderBy = 'date', order = 'desc') {
    const allProducts = [];
    let currentPage = 1;
    let hasMoreData = true;

    console.log(`B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu t·ª´ ${maxPages} trang...`);
    console.log(`C·∫•u h√¨nh: ${perPage} s·∫£n ph·∫©m/trang, s·∫Øp x·∫øp theo ${orderBy} ${order}`);

    while (currentPage <= maxPages && hasMoreData) {
      const products = await this.fetchPage(currentPage, perPage, orderBy, order);
      
      if (products && products.length > 0) {
        allProducts.push(...products);
        console.log(`üìà T·ªïng s·ªë s·∫£n ph·∫©m ƒë√£ thu th·∫≠p: ${allProducts.length}`);
        
        // Delay gi·ªØa c√°c request ƒë·ªÉ tr√°nh b·ªã block
        if (currentPage < maxPages) {
          console.log(`‚è≥ ƒê·ª£i ${this.delay}ms tr∆∞·ªõc khi thu th·∫≠p trang ti·∫øp theo...`);
          await this.sleep(this.delay);
        }
      } else {
        console.log(`üèÅ Kh√¥ng c√≤n d·ªØ li·ªáu ·ªü trang ${currentPage}, d·ª´ng thu th·∫≠p`);
        hasMoreData = false;
      }
      
      currentPage++;
    }

    console.log(`üéâ Ho√†n th√†nh! T·ªïng c·ªông thu th·∫≠p ƒë∆∞·ª£c ${allProducts.length} s·∫£n ph·∫©m t·ª´ ${currentPage - 1} trang`);
    return allProducts;
  }

  // Thu th·∫≠p d·ªØ li·ªáu v·ªõi retry mechanism
  async crawlProductsWithRetry(maxPages = 10, perPage = 100, orderBy = 'date', order = 'desc', maxRetries = 3) {
    let retryCount = 0;
    
    while (retryCount < maxRetries) {
      try {
        return await this.crawlProducts(maxPages, perPage, orderBy, order);
      } catch (error) {
        retryCount++;
        console.error(`‚ùå L·∫ßn th·ª≠ ${retryCount} th·∫•t b·∫°i:`, error.message);
        
        if (retryCount < maxRetries) {
          const waitTime = retryCount * 5000; // TƒÉng th·ªùi gian ch·ªù m·ªói l·∫ßn retry
          console.log(`‚è≥ ƒê·ª£i ${waitTime}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
          await this.sleep(waitTime);
        } else {
          console.error(`üí• ƒê√£ th·ª≠ ${maxRetries} l·∫ßn nh∆∞ng kh√¥ng th√†nh c√¥ng. D·ª´ng thu th·∫≠p.`);
          throw error;
        }
      }
    }
  }

  // Ki·ªÉm tra k·∫øt n·ªëi API
  async testConnection() {
    try {
      const url = this.buildApiUrl(1, 1, 'date', 'desc');
      console.log('ƒêang ki·ªÉm tra k·∫øt n·ªëi API...');
      
      const response = await axios.get(url, {
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
      });

      if (response.status === 200) {
        console.log('‚úÖ K·∫øt n·ªëi API th√†nh c√¥ng!');
        return true;
      } else {
        console.log('‚ö†Ô∏è K·∫øt n·ªëi API kh√¥ng ·ªïn ƒë·ªãnh');
        return false;
      }
    } catch (error) {
      console.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi API:', error.message);
      return false;
    }
  }

  // L·∫•y th√¥ng tin t·ªïng quan v·ªÅ API
  async getApiInfo() {
    try {
      const url = this.buildApiUrl(1, 1, 'date', 'desc');
      const response = await axios.get(url, {
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
      });

      if (response.status === 200 && response.data) {
        const totalProducts = response.data.length > 0 ? 'C√≥ d·ªØ li·ªáu' : 'Kh√¥ng c√≥ d·ªØ li·ªáu';
        console.log(`Th√¥ng tin API:`);
        console.log(`   - URL: ${url}`);
        console.log(`   - Tr·∫°ng th√°i: ${response.status}`);
        console.log(`   - D·ªØ li·ªáu: ${totalProducts}`);
        return true;
      }
    } catch (error) {
      console.error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin API:', error.message);
      return false;
    }
  }
}

module.exports = ProductCrawler;
